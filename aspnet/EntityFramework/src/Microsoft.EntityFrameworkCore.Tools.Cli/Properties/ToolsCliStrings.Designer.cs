// <auto-generated />
namespace Microsoft.EntityFrameworkCore
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
    using JetBrains.Annotations;

    public static class ToolsCliStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Tools.Cli.Properties.ToolsCliStrings", typeof(ToolsCliStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// The project '{projectName}' doesn't target a framework compatible with '{framework}'. The project must have a compatible framework in order to use the Entity Framework .NET Core CLI Commands.
        /// </summary>
        public static string IncompatibleStartupProject([CanBeNull] object projectName, [CanBeNull] object framework)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IncompatibleStartupProject", "projectName", "framework"), projectName, framework);
        }

        /// <summary>
        /// Build failed.
        /// </summary>
        public static string LogBuildFailed
        {
            get { return GetString("LogBuildFailed"); }
        }

        /// <summary>
        /// Build started for '{projectName}'.
        /// </summary>
        public static string LogBuildStarted([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogBuildStarted", "projectName"), projectName);
        }

        /// <summary>
        /// Build succeeded.
        /// </summary>
        public static string LogBuildSucceeded
        {
            get { return GetString("LogBuildSucceeded"); }
        }

        /// <summary>
        /// Setting the data directory to '{path}'.
        /// </summary>
        public static string LogDataDirectory([CanBeNull] object path)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogDataDirectory", "path"), path);
        }

        /// <summary>
        /// Using framework '{framework}' for '{projectName}'.
        /// </summary>
        public static string LogUsingFramework([CanBeNull] object framework, [CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingFramework", "framework", "projectName"), framework, projectName);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
